#!/usr/bin/env zsh
# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# Ensure essential environment variables are set
export XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"
export XDG_DATA_HOME="${XDG_DATA_HOME:-$HOME/.local/share}"
export XDG_CACHE_HOME="${XDG_CACHE_HOME:-$HOME/.cache}"
export ZDOTDIR="${ZDOTDIR:-$XDG_CONFIG_HOME/zsh}"
export ZSH_CACHE="${ZSH_CACHE:-$XDG_CACHE_HOME/zsh}"

# Helper functions
function _source {
  [[ -f "$1" ]] && source "$1"
}

function _cache {
  local cache_dir="$XDG_CACHE_HOME/zsh"
  local cache_file="$cache_dir/$1.zsh"
  
  if [[ ! -f "$cache_file" ]] || [[ "$commands[$1]" -nt "$cache_file" ]]; then
    mkdir -p "$cache_dir"
    "$@" > "$cache_file"
  fi
  source "$cache_file"
}

# Source configuration
source $ZDOTDIR/config.zsh

# Initialize antidote (managed by Nix)
# Cache antidote path for faster startup
_antidote_cache_file="$ZSH_CACHE/antidote_path"
if [[ -f "$_antidote_cache_file" ]]; then
  _antidote_path="$(cat "$_antidote_cache_file")"
else
  # Find and cache antidote path
  for antidote_file in /nix/store/*antidote*/share/antidote/antidote.zsh; do
    if [[ -f "$antidote_file" ]]; then
      _antidote_path="$antidote_file"
      mkdir -p "$(dirname "$_antidote_cache_file")"
      echo "$_antidote_path" > "$_antidote_cache_file"
      break
    fi
  done
fi

# Source antidote if path exists
[[ -f "$_antidote_path" ]] && source "$_antidote_path"

# Load plugins from .zsh_plugins.txt
# Use cache directory for compiled plugin file since ZDOTDIR might be read-only
ANTIDOTE_STATIC_FILE="$ZSH_CACHE/.zsh_plugins.zsh"
antidote load "$ZDOTDIR/.zsh_plugins.txt"

# Ensure Powerlevel10k is loaded (fallback if antidote didn't load it)
# Always try to load P10k, even if p10k command exists (might be a stub)
P10K_LOADED=0
for p10k_path in \
  "$HOME/.local/share/zsh/plugins/romkatv/powerlevel10k/powerlevel10k.zsh-theme" \
  "/nix/store/"*"powerlevel10k"*"/share/zsh/powerlevel10k/powerlevel10k.zsh-theme" \
  "$HOME/.cache/antidote/https-COLON--SLASH--SLASH-github.com-SLASH-romkatv-SLASH-powerlevel10k/powerlevel10k.zsh-theme"
do
  if [[ -f "$p10k_path" ]]; then
    source "$p10k_path"
    P10K_LOADED=1
    break
  fi
done

# If we loaded P10k, load the config immediately
if [[ $P10K_LOADED -eq 1 ]] && [[ -f $ZDOTDIR/.p10k.zsh ]]; then
  source $ZDOTDIR/.p10k.zsh
fi

## Bootstrap interactive sessions
if [[ $TERM != dumb ]]; then
  # nix-darwin handles compinit via enableGlobalCompInit = true
  # so we don't need to manually initialize it here
  
  # Add custom completions directory before sourcing other configs
  fpath=($ZDOTDIR/completions $fpath)

  # JJ completion setup - choose one method:
  # Option 1: Fast static completion (current, ~6ms)
  # (already loaded via fpath/_jj_fast)

  # Option 2: Official dynamic completion (~9ms, more features)
  # Uncomment to use dynamic completion instead of static:
  # eval "$(COMPLETE=zsh jj)" 2>/dev/null

  source $ZDOTDIR/keybinds.zsh
  source $ZDOTDIR/completion.zsh
  source $ZDOTDIR/aliases.zsh
  
  # Source Claude-specific aliases if claude module is enabled
  _source /Users/emiller/.config/dotfiles/config/claude/aliases.zsh

  # Auto-generated by nixos
  _source $ZDOTDIR/extra.zshrc
  # If you have host-local configuration, put it here
  _source $ZDOTDIR/local.zshrc

  # P10k config already loaded above when P10k theme was loaded
  # [[ -f $ZDOTDIR/.p10k.zsh ]] && source $ZDOTDIR/.p10k.zsh

  # Initialize zoxide with caching (needed for aliases)
  if (( $+commands[zoxide] )); then
    _cache zoxide init zsh
  fi
  
  # Defer only autopair which is not immediately needed
  {
    # Initialize autopair (deferred - happens when plugins are fully loaded)
    if (( $+functions[autopair-init] )); then
      autopair-init
    fi
  } &!
fi

export PATH="/Users/emiller/.pixi/bin:$PATH"
export PATH="$HOME/.local/bin:$PATH"

# bun completions
[ -s "/Users/emiller/.bun/_bun" ] && source "/Users/emiller/.bun/_bun"

# bun
export BUN_INSTALL="$HOME/.bun"
export PATH="$BUN_INSTALL/bin:$PATH"

# todo.txt configuration (managed in dotfiles, symlinked to ~/.todo.actions.d)
export TODOTXT_CFG_FILE="$HOME/.config/dotfiles/config/todotxt/todo.cfg"
export TODO_CFG_FILE="$HOME/.config/dotfiles/config/todotxt/todo.cfg"  # compatibility with some variants
if [ -r "$TODOTXT_CFG_FILE" ]; then
  source "$TODOTXT_CFG_FILE"
fi

alias t="todo.sh"
alias ta="t add"
alias td="t do"
alias ttoday="t today"

#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
[[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"
