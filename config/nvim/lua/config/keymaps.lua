-- Keymaps are automatically loaded on the VeryLazy event
-- Default keymaps that are always set: https://github.com/LazyVim/LazyVim/blob/main/lua/lazyvim/config/keymaps.lua
-- Doom Emacs-style keymaps

local map = vim.keymap.set

-- File operations (Doom: SPC f ...)
map("n", "<leader>.", "<cmd>Telescope find_files<cr>", { desc = "Browse files" })
map("n", "<leader>ff", "<cmd>Telescope find_files<cr>", { desc = "Find file" })
map("n", "<leader>fr", "<cmd>Telescope oldfiles<cr>", { desc = "Recent files" })
map("n", "<leader>fR", "<cmd>Telescope oldfiles cwd_only=true<cr>", { desc = "Recent files (project)" })
map("n", "<leader>fy", function()
  vim.fn.setreg("+", vim.fn.expand("%:p"))
  vim.notify("Yanked: " .. vim.fn.expand("%:p"))
end, { desc = "Yank filename" })
map("n", "<leader>fs", "<cmd>w<cr>", { desc = "Save file" })
map("n", "<leader>fS", "<cmd>wa<cr>", { desc = "Save all files" })
map("n", "<leader>f/", "<cmd>Telescope find_files<cr>", { desc = "Find file in project" })

-- Quit operations (Doom: SPC q ...)
map("n", "<leader>qq", "<cmd>qa<cr>", { desc = "Quit all" })
map("n", "<leader>qQ", "<cmd>qa!<cr>", { desc = "Quit all (force)" })

-- Buffer operations (Doom: SPC b ...)
map("n", "<leader>,", "<cmd>Telescope buffers sort_mru=true sort_lastused=true<cr>", { desc = "Switch buffer" })
map("n", "<leader>bb", "<cmd>Telescope buffers sort_mru=true sort_lastused=true<cr>", { desc = "Switch buffer" })
map("n", "<leader>bB", "<cmd>Telescope buffers<cr>", { desc = "Switch to any buffer" })
map("n", "<leader>bk", "<cmd>bd<cr>", { desc = "Kill buffer" })
map("n", "<leader>bK", "<cmd>%bd|e#<cr>", { desc = "Kill other buffers" })
map("n", "<leader>bn", "<cmd>bnext<cr>", { desc = "Next buffer" })
map("n", "<leader>bp", "<cmd>bprevious<cr>", { desc = "Previous buffer" })
map("n", "<leader>bs", "<cmd>w<cr>", { desc = "Save buffer" })
map("n", "<leader>bS", "<cmd>wa<cr>", { desc = "Save all buffers" })
map("n", "<leader>bX", "<cmd>enew<cr>", { desc = "New scratch buffer" })

-- Window management (Doom: SPC w ...)
map("n", "<leader>wv", "<cmd>vsplit<cr>", { desc = "Split window vertically" })
map("n", "<leader>ws", "<cmd>split<cr>", { desc = "Split window horizontally" })
map("n", "<leader>ww", "<C-w>w", { desc = "Switch windows" })
map("n", "<leader>wh", "<C-w>h", { desc = "Window left" })
map("n", "<leader>wj", "<C-w>j", { desc = "Window down" })
map("n", "<leader>wk", "<C-w>k", { desc = "Window up" })
map("n", "<leader>wl", "<C-w>l", { desc = "Window right" })
map("n", "<leader>wc", "<C-w>c", { desc = "Close window" })
map("n", "<leader>wo", "<C-w>o", { desc = "Close other windows" })
map("n", "<leader>w=", "<C-w>=", { desc = "Balance windows" })
map("n", "<leader>wr", "<C-w>r", { desc = "Rotate windows" })
map("n", "<leader>wm", "<cmd>only<cr>", { desc = "Maximize window" })

-- Search operations (Doom: SPC s ...)
map("n", "<leader>ss", "<cmd>Telescope current_buffer_fuzzy_find<cr>", { desc = "Search buffer" })
map("n", "<leader>sp", "<cmd>Telescope live_grep<cr>", { desc = "Search project" })
map("n", "<leader>sd", "<cmd>Telescope live_grep search_dirs=.<cr>", { desc = "Search directory" })
map("n", "<leader>si", "<cmd>Telescope lsp_workspace_symbols<cr>", { desc = "Search symbols" })
map("n", "<leader>/", "<cmd>Telescope live_grep<cr>", { desc = "Search project" })
map("n", "<leader>sr", "<cmd>lua require('spectre').toggle()<cr>", { desc = "Search & Replace" })

-- Project operations (Doom: SPC p ...)
map("n", "<leader>pp", "<cmd>Telescope projects<cr>", { desc = "Switch project" })
map("n", "<leader>pf", "<cmd>Telescope find_files<cr>", { desc = "Find file in project" })
map("n", "<leader>pr", "<cmd>Telescope oldfiles cwd_only=true<cr>", { desc = "Recent project files" })
map("n", "<leader>p.", "<cmd>Oil<cr>", { desc = "Browse project" })
map("n", "<leader>pd", "<cmd>Telescope file_browser<cr>", { desc = "Find directory" })
map("n", "<leader>pD", "<cmd>Oil<cr>", { desc = "Open project root" })
map("n", "<leader>p/", "<cmd>Telescope live_grep<cr>", { desc = "Search in project" })

-- Git operations (Doom: SPC g ...)
map("n", "<leader>gg", "<cmd>LazyGit<cr>", { desc = "LazyGit" })
map("n", "<leader>gn", "<cmd>Neogit<cr>", { desc = "Neogit (Magit-like)" })
map("n", "<leader>gs", "<cmd>Telescope git_status<cr>", { desc = "Git status" })
map("n", "<leader>gb", "<cmd>Telescope git_branches<cr>", { desc = "Git branches" })
map("n", "<leader>gl", "<cmd>Telescope git_commits<cr>", { desc = "Git log" })
map("n", "<leader>gL", "<cmd>Telescope git_bcommits<cr>", { desc = "Git log (buffer)" })
map("n", "<leader>gd", "<cmd>Gitsigns diffthis<cr>", { desc = "Git diff" })
map("n", "<leader>gD", "<cmd>DiffviewOpen<cr>", { desc = "Diffview open" })
map("n", "<leader>gv", "<cmd>DiffviewOpen<cr>", { desc = "View diff" })
map("n", "<leader>gV", "<cmd>DiffviewFileHistory %<cr>", { desc = "File history" })
map("n", "<leader>gH", "<cmd>DiffviewFileHistory<cr>", { desc = "Full history" })
map("n", "<leader>gC", "<cmd>DiffviewClose<cr>", { desc = "Close diffview" })
map("n", "<leader>gB", "<cmd>Gitsigns blame_line<cr>", { desc = "Git blame line" })
map("n", "<leader>gr", "<cmd>Gitsigns reset_hunk<cr>", { desc = "Reset hunk" })
map("n", "<leader>gR", "<cmd>Gitsigns reset_buffer<cr>", { desc = "Reset buffer" })
map("n", "<leader>gp", "<cmd>Gitsigns preview_hunk<cr>", { desc = "Preview hunk" })
map("n", "<leader>gS", "<cmd>Gitsigns stage_hunk<cr>", { desc = "Stage hunk" })
map("n", "<leader>gu", "<cmd>Gitsigns undo_stage_hunk<cr>", { desc = "Undo stage hunk" })

-- Code operations (Doom: SPC c ...)
map("n", "<leader>cf", function()
  require("conform").format({ async = true, lsp_fallback = true })
end, { desc = "Format buffer" })
map("n", "<leader>cc", "<cmd>Make<cr>", { desc = "Compile" })
map("n", "<leader>cC", "<cmd>Make!<cr>", { desc = "Recompile" })

-- Toggle operations (Doom: SPC t ...)
map("n", "<leader>tl", "<cmd>set nu!<cr>", { desc = "Toggle line numbers" })
map("n", "<leader>tw", "<cmd>set wrap!<cr>", { desc = "Toggle word wrap" })
map("n", "<leader>tf", "<cmd>set fullscreen!<cr>", { desc = "Toggle fullscreen" })

-- Help operations (Doom: SPC h ...)
map("n", "<leader>hv", "<cmd>Telescope help_tags<cr>", { desc = "Describe variable" })
map("n", "<leader>hf", "<cmd>Telescope help_tags<cr>", { desc = "Describe function" })
map("n", "<leader>hk", "<cmd>Telescope keymaps<cr>", { desc = "Describe keybinding" })
map("n", "<leader>hm", "<cmd>Telescope man_pages<cr>", { desc = "Man pages" })

-- Quick access (Doom shortcuts)
map("n", "<leader><space>", "<cmd>Telescope find_files<cr>", { desc = "Find file (quick)" })
map("n", "<leader>:", "<cmd>Telescope commands<cr>", { desc = "Execute command" })

-- Navigation (Evil-style but enhanced)
map("n", "gd", "<cmd>Telescope lsp_definitions<cr>", { desc = "Go to definition" })
map("n", "gD", "<cmd>Telescope lsp_references<cr>", { desc = "Go to references" })
map("n", "gi", "<cmd>Telescope lsp_implementations<cr>", { desc = "Go to implementation" })
map("n", "gt", "<cmd>Telescope lsp_type_definitions<cr>", { desc = "Go to type definition" })

-- Obsidian-specific (if using obsidian.nvim)
map("n", "<leader>on", "<cmd>ObsidianNew<cr>", { desc = "New note" })
map("n", "<leader>oo", "<cmd>ObsidianOpen<cr>", { desc = "Open in Obsidian" })
map("n", "<leader>os", "<cmd>ObsidianSearch<cr>", { desc = "Search notes" })
map("n", "<leader>oq", "<cmd>ObsidianQuickSwitch<cr>", { desc = "Quick switch notes" })
map("n", "<leader>ot", "<cmd>ObsidianToday<cr>", { desc = "Today's note" })
