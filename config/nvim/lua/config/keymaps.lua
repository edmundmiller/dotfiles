-- Keymaps are automatically loaded on the VeryLazy event
-- Default keymaps that are always set: https://github.com/LazyVim/LazyVim/blob/main/lua/lazyvim/config/keymaps.lua
-- Doom Emacs-style keymaps

local map = vim.keymap.set
local LazyVim = require("lazyvim.util")

-- File operations (Doom: SPC f ...)
map("n", "<leader>.", function() LazyVim.pick("files")() end, { desc = "Browse files" })
map("n", "<leader>ff", function() LazyVim.pick("files")() end, { desc = "Find file" })
map("n", "<leader>fr", function() LazyVim.pick("oldfiles")() end, { desc = "Recent files" })
map("n", "<leader>fR", function() LazyVim.pick("oldfiles", { cwd = vim.uv.cwd() })() end, { desc = "Recent files (project)" })
map("n", "<leader>fy", function()
  vim.fn.setreg("+", vim.fn.expand("%:p"))
  vim.notify("Yanked: " .. vim.fn.expand("%:p"))
end, { desc = "Yank filename" })
map("n", "<leader>fs", "<cmd>w<cr>", { desc = "Save file" })
map("n", "<leader>fS", "<cmd>wa<cr>", { desc = "Save all files" })
map("n", "<leader>f/", function() LazyVim.pick("files")() end, { desc = "Find file in project" })

-- Quit operations (Doom: SPC q ...)
map("n", "<leader>qq", "<cmd>qa<cr>", { desc = "Quit all" })
map("n", "<leader>qQ", "<cmd>qa!<cr>", { desc = "Quit all (force)" })

-- Buffer operations (Doom: SPC b ...)
map("n", "<leader>,", function() LazyVim.pick("buffers")() end, { desc = "Switch buffer" })
map("n", "<leader>bb", function() LazyVim.pick("buffers")() end, { desc = "Switch buffer" })
map("n", "<leader>bB", function() LazyVim.pick("buffers")() end, { desc = "Switch to any buffer" })
map("n", "<leader>bk", "<cmd>bd<cr>", { desc = "Kill buffer" })
map("n", "<leader>bK", "<cmd>%bd|e#<cr>", { desc = "Kill other buffers" })
map("n", "<leader>bn", "<cmd>bnext<cr>", { desc = "Next buffer" })
map("n", "<leader>bp", "<cmd>bprevious<cr>", { desc = "Previous buffer" })
map("n", "<leader>bs", "<cmd>w<cr>", { desc = "Save buffer" })
map("n", "<leader>bS", "<cmd>wa<cr>", { desc = "Save all buffers" })
map("n", "<leader>bX", "<cmd>enew<cr>", { desc = "New scratch buffer" })

-- Window management (Doom: SPC w ...)
map("n", "<leader>wv", "<cmd>vsplit<cr>", { desc = "Split window vertically" })
map("n", "<leader>ws", "<cmd>split<cr>", { desc = "Split window horizontally" })
map("n", "<leader>ww", "<C-w>w", { desc = "Switch windows" })
map("n", "<leader>wh", "<C-w>h", { desc = "Window left" })
map("n", "<leader>wj", "<C-w>j", { desc = "Window down" })
map("n", "<leader>wk", "<C-w>k", { desc = "Window up" })
map("n", "<leader>wl", "<C-w>l", { desc = "Window right" })
map("n", "<leader>wc", "<C-w>c", { desc = "Close window" })
map("n", "<leader>wo", "<C-w>o", { desc = "Close other windows" })
map("n", "<leader>w=", "<C-w>=", { desc = "Balance windows" })
map("n", "<leader>wr", "<C-w>r", { desc = "Rotate windows" })
map("n", "<leader>wm", "<cmd>only<cr>", { desc = "Maximize window" })

-- Search operations (Doom: SPC s ...)
map("n", "<leader>ss", function() LazyVim.pick("lines")() end, { desc = "Search buffer" })
map("n", "<leader>sp", function() LazyVim.pick("live_grep")() end, { desc = "Search project" })
map("n", "<leader>sd", function() LazyVim.pick("live_grep", { cwd = "." })() end, { desc = "Search directory" })
map("n", "<leader>si", function() LazyVim.pick("lsp_workspace_symbols")() end, { desc = "Search symbols" })
map("n", "<leader>/", function() LazyVim.pick("live_grep")() end, { desc = "Search project" })
map("n", "<leader>sr", "<cmd>lua require('spectre').toggle()<cr>", { desc = "Search & Replace" })

-- Project operations (Doom: SPC p ...)
map("n", "<leader>pp", "<cmd>Telescope projects<cr>", { desc = "Switch project" })
map("n", "<leader>pf", function() LazyVim.pick("files")() end, { desc = "Find file in project" })
map("n", "<leader>pr", function() LazyVim.pick("oldfiles", { cwd = vim.uv.cwd() })() end, { desc = "Recent project files" })
map("n", "<leader>p.", "<cmd>Oil<cr>", { desc = "Browse project" })
map("n", "<leader>pd", "<cmd>Telescope file_browser<cr>", { desc = "Find directory" })
map("n", "<leader>pD", "<cmd>Oil<cr>", { desc = "Open project root" })
map("n", "<leader>p/", function() LazyVim.pick("live_grep")() end, { desc = "Search in project" })

-- Git operations (Doom: SPC g ...)
map("n", "<leader>gg", "<cmd>LazyGit<cr>", { desc = "LazyGit" })
map("n", "<leader>gn", "<cmd>Neogit<cr>", { desc = "Neogit (Magit-like)" })
map("n", "<leader>gs", function() LazyVim.pick("git_status")() end, { desc = "Git status" })
map("n", "<leader>gb", function() LazyVim.pick("git_branches")() end, { desc = "Git branches" })
map("n", "<leader>gl", function() LazyVim.pick("git_commits")() end, { desc = "Git log" })
map("n", "<leader>gL", function() LazyVim.pick("git_bcommits")() end, { desc = "Git log (buffer)" })
map("n", "<leader>gd", "<cmd>Gitsigns diffthis<cr>", { desc = "Git diff" })
map("n", "<leader>gD", "<cmd>DiffviewOpen<cr>", { desc = "Diffview open" })
map("n", "<leader>gv", "<cmd>DiffviewOpen<cr>", { desc = "View diff" })
map("n", "<leader>gV", "<cmd>DiffviewFileHistory %<cr>", { desc = "File history" })
map("n", "<leader>gH", "<cmd>DiffviewFileHistory<cr>", { desc = "Full history" })
map("n", "<leader>gC", "<cmd>DiffviewClose<cr>", { desc = "Close diffview" })
map("n", "<leader>gB", "<cmd>Gitsigns blame_line<cr>", { desc = "Git blame line" })
map("n", "<leader>gr", "<cmd>Gitsigns reset_hunk<cr>", { desc = "Reset hunk" })
map("n", "<leader>gR", "<cmd>Gitsigns reset_buffer<cr>", { desc = "Reset buffer" })
map("n", "<leader>gp", "<cmd>Gitsigns preview_hunk<cr>", { desc = "Preview hunk" })
map("n", "<leader>gS", "<cmd>Gitsigns stage_hunk<cr>", { desc = "Stage hunk" })
map("n", "<leader>gu", "<cmd>Gitsigns undo_stage_hunk<cr>", { desc = "Undo stage hunk" })

-- Code operations (Doom: SPC c ...)
map("n", "<leader>cf", function()
  require("conform").format({ async = true, lsp_fallback = true })
end, { desc = "Format buffer" })
map("n", "<leader>cc", "<cmd>Make<cr>", { desc = "Compile" })
map("n", "<leader>cC", "<cmd>Make!<cr>", { desc = "Recompile" })

-- Toggle operations (Doom: SPC t ...)
map("n", "<leader>tl", "<cmd>set nu!<cr>", { desc = "Toggle line numbers" })
map("n", "<leader>tw", "<cmd>set wrap!<cr>", { desc = "Toggle word wrap" })
map("n", "<leader>tf", "<cmd>set fullscreen!<cr>", { desc = "Toggle fullscreen" })

-- Help operations (Doom: SPC h ...)
map("n", "<leader>hv", function() LazyVim.pick("help_tags")() end, { desc = "Describe variable" })
map("n", "<leader>hf", function() LazyVim.pick("help_tags")() end, { desc = "Describe function" })
map("n", "<leader>hk", function() LazyVim.pick("keymaps")() end, { desc = "Describe keybinding" })
map("n", "<leader>hm", function() LazyVim.pick("man_pages")() end, { desc = "Man pages" })

-- Quick access (Doom shortcuts)
map("n", "<leader><space>", function() LazyVim.pick("files")() end, { desc = "Find file (quick)" })
map("n", "<leader>:", function() LazyVim.pick("commands")() end, { desc = "Execute command" })

-- Navigation (Evil-style but enhanced)
map("n", "gd", function() LazyVim.pick("lsp_definitions")() end, { desc = "Go to definition" })
map("n", "gD", function() LazyVim.pick("lsp_references")() end, { desc = "Go to references" })
map("n", "gi", function() LazyVim.pick("lsp_implementations")() end, { desc = "Go to implementation" })
map("n", "gt", function() LazyVim.pick("lsp_type_definitions")() end, { desc = "Go to type definition" })

-- Notes operations (Doom: SPC n ...)
-- Obsidian keybindings are now in lua/plugins/obsidian.lua with Doom-style <leader>nr prefix

-- Org mode operations (Doom: SPC o ...)
map("n", "<leader>oa", function()
  require("orgmode").action("agenda.prompt")
end, { desc = "Org agenda" })
map("n", "<leader>oc", function()
  require("orgmode").action("capture.prompt")
end, { desc = "Org capture" })
map("n", "<leader>oA", function()
  require("orgmode").action("org_mappings.org_archive_subtree")
end, { desc = "Archive subtree" })
map("n", "<leader>od", function()
  require("orgmode").action("org_mappings.org_deadline")
end, { desc = "Set deadline" })
map("n", "<leader>os", function()
  require("orgmode").action("org_mappings.org_schedule")
end, { desc = "Set schedule" })
map("n", "<leader>ot", function()
  require("orgmode").action("org_mappings.org_set_tags_command")
end, { desc = "Set tags" })
map("n", "<leader>oT", function()
  require("orgmode").action("org_mappings.org_todo")
end, { desc = "Toggle TODO" })
map("n", "<leader>or", function()
  require("orgmode").action("org_mappings.org_refile")
end, { desc = "Refile" })
map("n", "<leader>oe", function()
  require("orgmode").action("org_mappings.org_export")
end, { desc = "Export" })
map("n", "<leader>ol", function()
  require("orgmode").action("org_mappings.org_insert_link")
end, { desc = "Insert link" })
map("n", "<leader>oL", function()
  require("orgmode").action("org_mappings.org_store_link")
end, { desc = "Store link" })
map("n", "<leader>o.", function()
  require("orgmode").action("org_mappings.org_time_stamp")
end, { desc = "Timestamp" })
map("n", "<leader>o!", function()
  require("orgmode").action("org_mappings.org_time_stamp_inactive")
end, { desc = "Timestamp (inactive)" })

-- Org mode specific buffer operations
vim.api.nvim_create_autocmd("FileType", {
  pattern = "org",
  callback = function()
    -- Major mode operations (Doom: SPC m ...)
    map("n", "<leader>mx", function()
      require("orgmode").action("org_mappings.org_toggle_checkbox")
    end, { desc = "Toggle checkbox", buffer = true })
    map("n", "<leader>mt", function()
      require("orgmode").action("org_mappings.org_todo")
    end, { desc = "Toggle TODO", buffer = true })
    map("n", "<leader>mT", function()
      require("orgmode").action("org_mappings.org_todo_prev")
    end, { desc = "Previous TODO", buffer = true })
    map("n", "<leader>mo", function()
      require("orgmode").action("org_mappings.org_open_at_point")
    end, { desc = "Open at point", buffer = true })
    map("n", "<leader>mh", function()
      require("orgmode").action("org_mappings.org_do_promote")
    end, { desc = "Promote heading", buffer = true })
    map("n", "<leader>ml", function()
      require("orgmode").action("org_mappings.org_do_demote")
    end, { desc = "Demote heading", buffer = true })
    map("n", "<leader>mH", function()
      require("orgmode").action("org_mappings.org_promote_subtree")
    end, { desc = "Promote subtree", buffer = true })
    map("n", "<leader>mL", function()
      require("orgmode").action("org_mappings.org_demote_subtree")
    end, { desc = "Demote subtree", buffer = true })
    map("n", "<leader>m*", function()
      require("orgmode").action("org_mappings.org_toggle_heading")
    end, { desc = "Toggle heading", buffer = true })
    map("n", "<leader>mRET", function()
      require("orgmode").action("org_mappings.org_meta_return")
    end, { desc = "Meta return", buffer = true })
    map("n", "<leader>mir", function()
      require("orgmode").action("org_mappings.org_insert_heading_respect_content")
    end, { desc = "Insert heading", buffer = true })
    map("n", "<leader>mit", function()
      require("orgmode").action("org_mappings.org_insert_todo_heading")
    end, { desc = "Insert TODO", buffer = true })
    map("n", "<leader>miT", function()
      require("orgmode").action("org_mappings.org_insert_todo_heading_respect_content")
    end, { desc = "Insert TODO (respect)", buffer = true })
    map("n", "<leader>mil", function()
      require("orgmode").action("org_mappings.org_insert_link")
    end, { desc = "Insert link", buffer = true })
    map("n", "<leader>mn", function()
      require("orgmode").action("org_mappings.org_next_link")
    end, { desc = "Next link", buffer = true })
    map("n", "<leader>mp", function()
      require("orgmode").action("org_mappings.org_previous_link")
    end, { desc = "Previous link", buffer = true })
    map("n", "<leader>ms", function()
      require("orgmode").action("org_mappings.org_store_link")
    end, { desc = "Store link", buffer = true })
    map("n", "<leader>m.", function()
      require("orgmode").action("org_mappings.org_time_stamp")
    end, { desc = "Timestamp", buffer = true })
    map("n", "<leader>m!", function()
      require("orgmode").action("org_mappings.org_time_stamp_inactive")
    end, { desc = "Timestamp (inactive)", buffer = true })
    map("n", "<leader>md", function()
      require("orgmode").action("org_mappings.org_deadline")
    end, { desc = "Set deadline", buffer = true })
    map("n", "<leader>mS", function()
      require("orgmode").action("org_mappings.org_schedule")
    end, { desc = "Set schedule", buffer = true })
    map("n", "<leader>mr", function()
      require("orgmode").action("org_mappings.org_refile")
    end, { desc = "Refile", buffer = true })
    map("n", "<leader>me", function()
      require("orgmode").action("org_mappings.org_export")
    end, { desc = "Export", buffer = true })
    map("n", "<leader>ma", function()
      require("orgmode").action("org_mappings.org_archive_subtree")
    end, { desc = "Archive subtree", buffer = true })
    map("n", "<leader>mA", function()
      require("orgmode").action("org_mappings.org_toggle_archive_tag")
    end, { desc = "Toggle archive tag", buffer = true })
    map("n", "<leader>m:", function()
      require("orgmode").action("org_mappings.org_set_tags_command")
    end, { desc = "Set tags", buffer = true })
    
    -- Table operations (in org buffers)
    map("n", "<leader>mtt", "<cmd>TableModeToggle<cr>", { desc = "Toggle table mode", buffer = true })
    map("n", "<leader>mtr", "<cmd>TableModeRealign<cr>", { desc = "Realign table", buffer = true })
    map("n", "<leader>mtf", "<cmd>TableAddFormula<cr>", { desc = "Add formula", buffer = true })
    map("n", "<leader>mtc", "<cmd>TableEvalFormulaLine<cr>", { desc = "Eval formula line", buffer = true })
  end,
})
