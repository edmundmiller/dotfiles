# Default value for when terminal width is not given via --config width=...
width = 192

[colors]
timestamp = { fg = "bright black" }
author = { fg = "cyan" }
mark = { fg = "bright black" }
pin = { fg = "bright magenta" }
current_working_copy = { reverse = true }
"empty change_id" = { italic = true }
"empty desc_and_refs" = { italic = true }
"empty description" = { fg = "bright black" }
"empty commit_id" = { italic = true }
"empty timestamp" = { italic = true }
node = { fg = "bright black" }
"node unsafe" = { fg = "yellow" }
"unsafe change_id" = { fg = "yellow" }
"unsafe commit_id" = { fg = "yellow" }
"unsafe pin" = { fg = "yellow" }
prefix = { bold = false }
"trunk change_id" = { underline = true }
"trunk bookmarks" = { underline = true }
"trunk commit_id" = { underline = true }
"node trunk" = { underline = true }
working_copies = { fg = "default" }
"conflict change_id" = { fg = "red" }
summary = { fg = "bright black" }

[revset-aliases]
# Nodes outside ::safe_heads will be shown in yellow in credits_roll{_node}:
"safe_heads" = "remote_bookmarks()"
# Arrows will be shown in credits_roll, pointing to left & right_pin:
"left_pin" = "trunk()"
"right_pin" = "@"

[template-aliases]
"remove_merge_prefixes(str)" = '''
  str.first_line().remove_prefix("Merge ").remove_prefix("Merged ").remove_prefix("pull request ").remove_prefix("branch ")
'''
"cdots(n)" = 'label("mark", pad_start(n, "", "·"))'
"spread_left_and_right(width, left, right)" = '''
  truncate_end(
    width,
    pad_end(width + 1, left, cdots(1)),
    surround(cdots(2), "", right)
  )
'''
"references" = '''
  separate(cdots(1),
    coalesce(
      working_copies,
      if(current_working_copy,
        label("working_copies", "@")),
    ),
    tags,
    bookmarks
  )
'''
"trunc_summary_line(width, s)" = '''
  line.substr(0, 2) ++ truncate_start(width - 2, s.substr(2,s.len()), "…")
'''
"diff_summary_w(width)" = '''
  stringify(diff.summary()).lines().map(|line| trunc_summary_line(width, line)).join("\n")
'''
"format_short_id(id)" = '''
  id.shortest(config("width").as_integer()/20)
'''
"credits_roll_w(width, max_summary_lines, statted_revset)" = '''
  label(separate(" ",
          if(current_working_copy, "current_working_copy"),
          if(immutable, "immutable"),
          if(self.contained_in("safe_heads.."), "unsafe"),
          if(empty, "empty"),
          if(conflict, "conflict"),
          if(self.contained_in("trunk()"), "trunk"),
        ),
    separate(label("mark", ' '),
      format_short_change_id_with_hidden_and_divergent_info(self),
        coalesce(
          if(self.contained_in("left_pin"), label("pin","⚑")),
          if(self.contained_in("left_pin::"), label("mark","↓")),
          if(self.contained_in("::left_pin"), label("mark","↑")),
          label("mark","↔")
        ),
      label("desc_and_refs",
        spread_left_and_right(
          width*5/9,
          separate(' ',
            if(conflict,
              "(conflict)"),
            if(description,
              remove_merge_prefixes(description),
              label("description", "(no description)")),
          ),
          separate(cdots(1),
            if(description.trim().lines().len() > 1,
              label("mark", "(+" ++ description.trim().lines().len() - 1 ++ ")")),
            truncate_end(width/8, references, label("bookmarks", "…")),
            if(!mine,
              truncate_end(width/10, author.name(), label("author", "…"))
            ),
          )
        )
      ),
        coalesce(
          if(self.contained_in("right_pin"), label("pin","⚑")),
          if(self.contained_in("right_pin::"), label("mark","↓")),
          if(self.contained_in("::right_pin"), label("mark","↑")),
          label("mark","↔")
        ),
      format_short_id(commit_id),
      if(width >= 75, cdots(1) ++ committer.timestamp().ago() ++ cdots(1)),
    )
  )
  ++ 
  surround(" ", "",
    separate("",
      if(self.contained_in("present(ci_pending)"), "⌛"),
      if(self.contained_in("present(ci_failure)"), "❌"),
      if(self.contained_in("present(ci_success)"), "✅"),
      if(self.contained_in("present(review_pending)"), "👋"),
      if(self.contained_in("present(review_failure)"), "👎"),
      if(self.contained_in("present(review_success)"), "👍"),
    )
  )
  ++ "\n" ++
  if(!empty,
    indent(pad_end(width/20 + 3, "", " "),
      if(self.contained_in(statted_revset),
        diff.stat(width*11/16),
        if(max_summary_lines != 0,
          label("summary",
            if(max_summary_lines < 0 || diff.files().len() <= max_summary_lines,
              diff_summary_w(width*11/16),
              diff.files().len() ++ " files modified"
            ),
          )
        )
      )
    )
  )
'''
"credits_roll(max_summary_lines, statted_revset)" = '''
  credits_roll_w(config("width").as_integer(), max_summary_lines, statted_revset)
'''
credits_roll_node = '''
  label(
    if(self,
      separate(' ',
        if(current_working_copy, "current_working_copy"),
        if(self.contained_in("trunk()"), "trunk"),
        coalesce(
          if(self.contained_in("safe_heads.."), "unsafe"),
          if(self.contained_in("bookmarks() | remote_bookmarks()"),
            "bookmarks"),
          if(!self.mine(), "author")),
        if(conflict, "conflict"),
    )),
    coalesce(
      if(!self, "🮀"),
      if(root, "┴"),
      if(conflict, "×"),
      if(git_head, if(immutable, "◈", "◉")),
      if(empty, if(immutable, "◇", "○")),
      if(immutable, "◆"),
      "●"
    )
  )
'''
