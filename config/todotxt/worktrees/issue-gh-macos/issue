#!/bin/bash

#install this in the .todo.actions.d folder of your todo.txt CLI install.

# macOS compatibility shims
if [ "$(uname)" = "Darwin" ]; then
    # Replace notify-send with osascript for macOS notifications
    notify-send() {
        local summary="$1"
        shift
        local body="$*"
        /usr/bin/osascript -e "display notification \"$body\" with title \"$summary\""
    }
    
    # Replace xdg-open with open for macOS
    xdg-open() {
        /usr/bin/open "$@"
    }
fi

# Detect GitHub CLI availability and authentication
HAS_GH=0
if command -v gh >/dev/null 2>&1; then
    if gh auth status -h "${GITHUB_HOST:-github.com}" >/dev/null 2>&1; then
        HAS_GH=1
    fi
fi

action=$1
shift

SCRIPTDIR="$(dirname $0)"

# Set default opener (use 'open' on macOS, 'xdg-open' on Linux)
[ -z "$TODO_ISSUE_OPENER" ] && TODO_ISSUE_OPENER=${TODO_ISSUE_OPENER:-$([ "$(uname)" = "Darwin" ] && echo "open" || echo "xdg-open")}

[ "$action" = "usage" ] && {
  echo "  Handle linked issues:"
  echo "    issue [[-d]] [itemno]"
  echo "      view the issue referenced in the item (if any). Add -d to search in done tasks"
  echo "    issue sync"
  echo "      sync issues from remote"
  echo "    issue close|done [itemno] ..."
  echo "      close the reference issue (and mark the item as a whole as done)"
  echo ""
  exit
}

# Return first matching URL for the item. Supports both formats:
# - issue:http(s)://... (original)
# - gh:owner/repo#123  (GitHub shorthand)
geturl() {
    local line
    line="$(sed -n "${1}p" "$target")"
    # Prefer explicit issue:http(s) URLs if present
    local url
    url=$(printf "%s\n" "$line" | grep -Eo "issue:http[^[:blank:]]+" | head -n1 | sed 's/^issue://')
    if [ -n "$url" ]; then
        echo "$url"
        return 0
    fi
    # Fallback to gh:owner/repo#123 -> https://github.com/owner/repo/issues/123
    local gh
    gh=$(printf "%s\n" "$line" | grep -oE 'gh:[A-Za-z0-9._-]+/[A-Za-z0-9._-]+#[0-9]+' | head -n1)
    if [ -n "$gh" ]; then
        local owner repo num
        owner=$(printf "%s" "$gh" | sed -E 's/^gh:([^/]+)\/([^#]+)#([0-9]+)$/\1/')
        repo=$(printf "%s" "$gh" | sed -E 's/^gh:([^/]+)\/([^#]+)#([0-9]+)$/\2/')
        num=$(printf "%s" "$gh" | sed -E 's/^gh:([^/]+)\/([^#]+)#([0-9]+)$/\3/')
        echo "https://github.com/$owner/$repo/issues/$num"
        return 0
    fi
    return 1
}

# Extract repo and issue number from either URL or gh token on the given line
getrepoandnum() {
    local line repo num
    line="$(sed -n "${1}p" "$target")"
    # Try gh token first
    if printf "%s\n" "$line" | grep -qE 'gh:[A-Za-z0-9._-]+/[A-Za-z0-9._-]+#[0-9]+'; then
        repo=$(printf "%s\n" "$line" | grep -oE 'gh:[A-Za-z0-9._-]+/[A-Za-z0-9._-]+#[0-9]+' | head -n1 | sed -E 's/^gh:([^/]+)\/([^#]+)#([0-9]+)$/\1\/\2/')
        num=$(printf "%s\n" "$line" | grep -oE 'gh:[A-Za-z0-9._-]+/[A-Za-z0-9._-]+#[0-9]+' | head -n1 | sed -E 's/^gh:[^#]+#([0-9]+)$/\1/')
        printf "%s %s\n" "$repo" "$num"
        return 0
    fi
    # Else parse from URL if present
    if printf "%s\n" "$line" | grep -qE 'issue:https?://github.com/[^/]+/[^/]+/issues/[0-9]+'; then
        repo=$(printf "%s\n" "$line" | grep -oE 'issue:https?://github.com/[^/]+/[^/]+/issues/[0-9]+' | head -n1 | sed -E 's#^issue:https?://github.com/([^/]+/[^/]+)/issues/[0-9]+$#\1#')
        num=$(printf "%s\n" "$line" | grep -oE 'issue:https?://github.com/[^/]+/[^/]+/issues/[0-9]+' | head -n1 | sed -E 's#^issue:https?://github.com/[^/]+/[^/]+/issues/([0-9]+)$#\1#')
        printf "%s %s\n" "$repo" "$num"
        return 0
    fi
    return 1
}

if [ "$1" = "-d" ]; then
    shift
    target=$DONE_FILE
else
    target=$TODO_FILE
fi

[ -n "$TODOTXT_INFERMAP" ] && export TODO_ISSUE_INFERMAP="$TODOTXT_INFERMAP"


if [ "$1" = "sync" ]; then
    extra=""
    [ "$TODOTXT_NOTIFY" = "1" ] && notify-send -a "todo.txt-more" "Issue sync" "Starting..."
    [ -n "$TODO_ISSUE_LABELMAP" ] && extra="-l $TODO_ISSUE_LABELMAP"
    [ -n "$TODO_ISSUE_INFERMAP" ] && extra="$extra -i $TODO_ISSUE_INFERMAP"
    if "$SCRIPTDIR/helpers/issuesync.py" -t "$TODO_FILE" -d "$DONE_FILE" $extra; then
        [ "$TODOTXT_NOTIFY" = "1" ] && notify-send -a "todo.txt-more" "Issue sync" "Done"
    else
        msg="Unable to sync issues. Did you set \$GITHUB_TOKEN?"
        echo "$msg" >&2
        [ "$TODOTXT_NOTIFY" = "1" ] && notify-send -a "todo.txt-more" "Issue sync" "$msg"
    fi
elif [ "$1" = "done" ] || [ "$1" = "do" ] || [ "$1" = "close" ] || [ "$1" = "c" ]; then
    while [ "$#" -gt 0 ] ; do
        itemno=$1
        url=$(geturl $itemno)
        shift
        item="$($TODO_FULL_SH show $itemno)"
        $TODO_FULL_SH done "$itemno"
        if echo "$url" | grep -q "github.com" ; then
            if [ "$HAS_GH" -eq 1 ]; then
                # Use gh to close the issue
                read repo num < <(getrepoandnum "$itemno")
                if [ -n "$repo" ] && [ -n "$num" ]; then
                    gh issue close "$num" -R "$repo" >/dev/null 2>&1 && closed=1 || closed=0
                else
                    closed=0
                fi
            elif [ -n "$GITHUB_TOKEN" ]; then
                # Fallback to curl with token
                curl \
                  -sS -X PATCH \
                  -H "Accept: application/vnd.github+json" \
                  -H "Authorization: Bearer $GITHUB_TOKEN" \
                  -H "X-GitHub-Api-Version: 2022-11-28" \
                  "$(echo "$url" | sed -e 's#https://github.com/#https://api.github.com/repos/#')" \
                  -d '{"state":"closed"}' >/dev/null 2>&1 && closed=1 || closed=0
            else
                closed=0
            fi
            if [ "$closed" = "1" ]; then
                [ "$TODOTXT_NOTIFY" = "1" ] && notify-send -a "todo.txt-more" "Task/issue closed" "$item"
            else
                [ "$TODOTXT_NOTIFY" = "1" ] && notify-send -a "todo.txt-more" "Task done (issue untouched)" "$item"
            fi
        else
            [ "$TODOTXT_NOTIFY" = "1" ] && notify-send -a "todo.txt-more" "Task done" "$item"
        fi
    done
else
    [ "$1" = "view" ] && shift
    itemno=$1
    # If gh token exists and gh is available, prefer gh --web
    if [ "$HAS_GH" -eq 1 ] && sed -n "${itemno}p" "$target" | grep -qE 'gh:[A-Za-z0-9._-]+/[A-Za-z0-9._-]+#[0-9]+'; then
        read repo num < <(getrepoandnum "$itemno")
        if [ -n "$repo" ] && [ -n "$num" ]; then
            [ "$TODOTXT_NOTIFY" = "1" ] && notify-send -a "todo.txt-more" "Opening issue in viewer" "https://github.com/$repo/issues/$num"
            gh issue view "$num" -R "$repo" --web >/dev/null 2>&1 || $TODO_ISSUE_OPENER "https://github.com/$repo/issues/$num"
            exit $?
        fi
    fi
    url=$(geturl "$itemno")
    if [ -n "$url" ]; then
        [ "$TODOTXT_NOTIFY" = "1" ] && notify-send -a "todo.txt-more" "Opening issue in viewer" "$url"
        $TODO_ISSUE_OPENER "$url"
    else
        msg="No issue found"
        echo "$msg">&2
        [ "$TODOTXT_NOTIFY" = "1" ] && notify-send -a "todo.txt-more" "Error" "$msg"
    fi
fi

