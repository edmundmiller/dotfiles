{
  config,
  options,
  pkgs,
  lib,
  ...
}:
with lib;
with lib.my;
let
  cfg = config.modules.shell.zsh;
  inherit (config.dotfiles) configDir;
  
  # Antidote initialization script
  antidoteInit = ''
    # Initialize antidote (managed by Nix)
    source "${pkgs.antidote}/share/antidote/antidote.zsh"
    
    # Load plugins from .zsh_plugins.txt
    antidote load "$ZDOTDIR/.zsh_plugins.txt"
  '';
  
in
{
  options.modules.shell.zsh = with types; {
    enable = mkBoolOpt false;

    aliases = mkOpt (attrsOf (either str path)) { };

    rcInit = mkOpt' lines "" ''
      Zsh lines to be written to $XDG_CONFIG_HOME/zsh/extra.zshrc and sourced by
      $XDG_CONFIG_HOME/zsh/.zshrc
    '';
    envInit = mkOpt' lines "" ''
      Zsh lines to be written to $XDG_CONFIG_HOME/zsh/extra.zshenv and sourced
      by $XDG_CONFIG_HOME/zsh/.zshenv
    '';

    rcFiles = mkOpt (listOf (either str path)) [ ];
    envFiles = mkOpt (listOf (either str path)) [ ];
  };

  config = mkIf cfg.enable {
    users.defaultUserShell = pkgs.zsh;

    programs.zsh = {
      enable = true;
      enableCompletion = true;
      # I init completion myself, because enableGlobalCompInit initializes it
      # too soon, which means commands initialized later in my config won't get
      # completion, and running compinit twice is slow.
      enableGlobalCompInit = false;
      promptInit = "";
    };

    # Create symlinks for zsh configuration files in home directory
    home.file = {
      ".zshenv".source = "${config.dotfiles.configDir}/zsh/.zshenv";
    };

    user.packages = with pkgs; [
      zsh
      unstable.atuin
      bat
      btop
      eza
      fcp
      fd
      unstable.fzf
      gh
      git-lfs
      glow
      (ripgrep.override { withPCRE2 = true; })
      lazygit
      neovim
      procs
      delta
      hyperfine
      just
      sd
      unstable.yazi
      zoxide
    ];

    # Install antidote at system level for nix-darwin
    environment.systemPackages = with pkgs; [
      antidote
    ];

    env = {
      ZDOTDIR = "$XDG_CONFIG_HOME/zsh";
      ZSH_CACHE = "$XDG_CACHE_HOME/zsh";
    };

    home.configFile = {
      # Link individual zsh files (excluding .zshrc which we generate)
      "zsh/aliases.zsh".source = "${configDir}/zsh/aliases.zsh";
      "zsh/completion.zsh".source = "${configDir}/zsh/completion.zsh";
      "zsh/completions".source = "${configDir}/zsh/completions";
      "zsh/config.zsh".source = "${configDir}/zsh/config.zsh";
      "zsh/keybinds.zsh".source = "${configDir}/zsh/keybinds.zsh";
      "zsh/.zsh_plugins.txt".source = "${configDir}/zsh/.zsh_plugins.txt";
      "zsh/.p10k.zsh".source = "${configDir}/zsh/.p10k.zsh";

      # Main zsh configuration file
      "zsh/.zshrc".text = ''
        #!/usr/bin/env zsh
        # Ensure essential environment variables are set
        export XDG_CONFIG_HOME="''${XDG_CONFIG_HOME:-$HOME/.config}"
        export XDG_DATA_HOME="''${XDG_DATA_HOME:-$HOME/.local/share}"
        export XDG_CACHE_HOME="''${XDG_CACHE_HOME:-$HOME/.cache}"
        export ZDOTDIR="''${ZDOTDIR:-$XDG_CONFIG_HOME/zsh}"
        export ZSH_CACHE="''${ZSH_CACHE:-$XDG_CACHE_HOME/zsh}"
        
        # Helper functions
        function _source {
          [[ -f "$1" ]] && source "$1"
        }
        
        function _cache {
          local cache_dir="$XDG_CACHE_HOME/zsh"
          local cache_file="$cache_dir/$1.zsh"
          
          if [[ ! -f "$cache_file" ]] || [[ "$commands[$1]" -nt "$cache_file" ]]; then
            mkdir -p "$cache_dir"
            "$@" > "$cache_file"
          fi
          source "$cache_file"
        }
        
        # Source configuration
        source $ZDOTDIR/config.zsh
        
        ${antidoteInit}
        
        ## Bootstrap interactive sessions
        if [[ $TERM != dumb ]]; then
          autoload -Uz compinit && compinit -i -u -d $ZSH_CACHE/zcompdump
        
          source $ZDOTDIR/keybinds.zsh
          source $ZDOTDIR/completion.zsh
          source $ZDOTDIR/aliases.zsh
        
          # Auto-generated by nixos
          _source $ZDOTDIR/extra.zshrc
          # If you have host-local configuration, put it here
          _source $ZDOTDIR/local.zshrc
        
          # Load p10k config if it exists
          [[ -f $ZDOTDIR/.p10k.zsh ]] && source $ZDOTDIR/.p10k.zsh
        
          # Initialize zoxide with caching
          if (( $+commands[zoxide] )); then
            _cache zoxide init zsh
          fi
          
          # Initialize autopair
          if (( $+functions[autopair-init] )); then
            autopair-init
          fi
        fi
      '';

    };

    # Use home-manager directly for text-based files (like git module does "for proper activation")
    home-manager.users.${config.user.name} = {
      xdg.configFile = {
        # Why am I creating extra.zsh{rc,env} when I could be using extraInit?
        # Because extraInit generates those files in /etc/profile, and mine just
        # write the files to ~/.config/zsh; where it's easier to edit and tweak
        # them in case of issues or when experimenting.
        "zsh/extra.zshrc".text =
          let
            aliasLines = mapAttrsToList (n: v: ''alias ${n}="${v}"'') cfg.aliases;
          in
          ''
            # This file was autogenerated, do not edit it!
            ${concatStringsSep "\n" aliasLines}
            ${concatMapStrings (path: ''
              source '${path}'
            '') cfg.rcFiles}
            ${cfg.rcInit}
          '';

        "zsh/extra.zshenv".text = ''
          # This file is autogenerated, do not edit it!
          ${concatMapStrings (path: ''
            source '${path}'
          '') cfg.envFiles}
          ${cfg.envInit}
        '';
      };
    };

    modules.shell.zsh.aliases = {
      # aliases
      cd = "z";
      cdi = "zi";

      chmod = "chmod -v";
      cp = "cp -iv";
      ln = "ln -v";
      mkdir = "mkdir -vp";
      mv = "mv -iv";
      rm = "rm -v";
      rmdir = "rmdir -v";

      rst = "exec $SHELL";
      sudo = "sudo ";
      su = "sudo su";

      # nix
      scrap = "nix-collect-garbage -d && sudo nix-collect-garbage -d";
      rebuild = "sudo nixos-rebuild switch";
      reflake = "sudo nixos-rebuild switch --recreate-lock-file";
      nix-clean = "nix-collect-garbage -d";

      # ls
      ls = "eza --group-directories-first --git";
      la = "ll -a";
      ll = "ls -l";
      l = "ls -1A";

      # ripgrep
      rg = "rg --color=auto";
      rga = "rg -uuu";
      rgf = "rg --files";

      # other
      q = "exit";
      c = "clear";
      cat = "bat --style=plain";
      e = "$EDITOR";
      v = "$EDITOR";
      vi = "$EDITOR";
      vim = "$EDITOR";
      nvim = "$EDITOR";
      http = "xh";
      dsize = "du -hs";
      rcp = "rsync -avh --progress";
      weather = "curl -s 'wttr.in/Ft+Worth?m&format=3'";

      # taskwarrior
      t = "task";
      ta = "task add";
      td = "task done";
      tm = "task modify";
      ts = "task sync";
      to = "taskopen";
      tn = "task-note";
      tp = "task +PENDING";
      tb = "task burndown.daily";
      tsw = "task start";
      tst = "task stop";
      bug = "taskopen -n";
      td1 = "task done +1";
      td2 = "task done +2";
      td3 = "task done +3";
      td4 = "task done +4";

      # docker-compose
      dcup = "docker-compose up -d";
      dcdw = "docker-compose down";
      dcre = "docker-compose restart";
      dclo = "docker-compose logs -f";
    };

    modules.shell.zsh.rcFiles = [ ];
  };
}