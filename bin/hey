#!/usr/bin/env cached-nix-shell
#! nix-shell -p just -i "just --justfile" --quiet

# Nix's CLI has a poor user story, in my opinion. It could be better; Guix is a
# good role model here. I wrote this script to abstract the more common
# workflows, like rebuilding (nixos-rebuild), cleaning up (nix-collect-garbage),
# package/env management (nix-env), updating, rolling back, etc. As well as some
# utility operations (like managing generations, building remotely, or swapping
# themes on the fly).
#
# Because I can go months without shaving yaks in NixOS, exact flags or details
# are often and easily forgotten. This spares me that fumbling phase and also
# serves as a reference.

FLAKE := "."
# FIXME
HOST := "framework"

alias re := rebuild

rebuild +ARGS='switch':
  #!/usr/bin/env bash
  # Rebuild the current system's flake
  args=""
  if [[ $1 == "--build-host" ]]; then
    args+=" --build-host $2"
    shift 2
  fi
  if [[ $1 == "--target-host" ]]; then
    args+=" --target-host $2"
    shift 2
  fi
  if [[ $1 == "--host" ]]; then
    args+=" --host $2"
    shift 2
  fi
  if [[ $1 == "--user" ]]; then
    args+=" --user"
    shift
  fi
  if [[ $1 == "--fast" ]]; then
    args+=" --fast"
    shift
  fi
  set -x
  sudo nixos-rebuild --flake "{{FLAKE}}#{{HOST}}" --option pure-eval no {{ARGS}} "$@"

repl:
  #!/usr/bin/env bash
  # Open a nix-repl with nixpkgs and dotfiles preloaded
  tempfile="/tmp/dotfiles-repl.nix"
  echo "(builtins.getFlake \"$flake\")" > $tempfile
  nix repl "<nixpkgs>" $tempfile

check:
  # Run 'nix flake check' on your dotfiles
  nix flake check {{FLAKE}}

@info REPO *QUERY:
  # Retrieve details (including SHA) for a REPO.
  # repo="{{REPO}}"
  # commit=""
  # if [[ $repo == *":"* ]]; then
  # fi
  # if [[ $repo =~ ^[^/]+/[^/]+$ ]]; then
  #   repo="https://github.com/$repo"
  # fi
  # nix-shell -p nix-prefetch-git --run "nix-prefetch-git --quiet $repo $commit"

show:
  # Run 'nix flake show' on your dotfiles
  nix flake show {{FLAKE}}

@theme THEME_NAME:
  # Quickly swap to another theme module
  THEME="{{THEME_NAME}}" rebuild --fast test

@test +ARGS='':
  # Quickly rebuild, for quick iteration
  rebuild --fast test {{ARGS}}

rollback:
  # Roll back to last generation
  rebuild --rollback switch

# update +FLAKES='':
#     # Update specific flakes or all of them
#     if [ -z "{{FLAKES}}" ]; then
#         echo "Updating all flakes.."
#         nix flake update {{flake}} --impure
#     fi
#     if
#         echo "Trying to update flakes: {{FLAKES}}"
#         nix flake update --impure {{flakes}} {{flake}}
#     fi

# upgrade: update
#   # Update all flakes and rebuild system
#   rebuild switch

@search QUERY:
  # Search nixpkgs for a package
  nix search nixpkgs {{QUERY}}

@swap PATHS:
  #!/usr/bin/env bash
  # Recursively swap nix-store symlinks with copies (or back).
  #
  # The purpose is so you can have copies of your dotfiles that can be modified in
  # place (so you can iterate
